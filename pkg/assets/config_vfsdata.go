// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Config contains the faasd configuration assets
var Config = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 6, 8, 3, 51, 371962039, time.UTC),
		},
		"/docker-compose.yaml": &vfsgen۰CompressedFileInfo{
			name:             "docker-compose.yaml",
			modTime:          time.Date(2020, 6, 6, 8, 3, 2, 909094, time.UTC),
			uncompressedSize: 2406,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x4f\x6f\xdb\x3e\x0c\xbd\xe7\x53\x08\xf9\x9d\x6d\x27\xfe\xb5\x6b\x60\x40\x87\x62\xd8\x75\x18\x86\x01\x3b\x0a\x8a\xc5\x24\x42\x2c\xc9\xa3\x28\xbb\xde\xa7\x1f\x94\xd4\x7f\x9a\x3a\x4b\x8b\x5d\xeb\x9b\xf8\x1e\x29\x53\x7c\x8f\x0d\xa0\xd7\xce\x16\x6c\xf9\x7f\xfa\xb0\x5c\x78\xc0\x46\x97\xe0\x8b\x05\x63\x5b\xe9\x75\x99\xc8\x40\x87\xa4\xae\xc2\x5e\xdb\x18\x64\x4c\x1b\xb9\x87\x82\x29\x57\x1e\x01\x53\xed\x32\x57\x83\xdd\x49\xe9\xb3\xd7\x09\xab\x74\xbd\x49\xd7\x0f\xa7\x3c\xb0\x8d\x46\x67\x0d\x58\x3a\x17\x62\x2c\x61\xb5\x43\xe2\x9b\xd5\x66\x35\x44\x3c\x94\x08\x24\x8c\x0b\x96\x44\x2d\xe9\xc0\x33\x0c\x36\x3b\x87\xfd\x40\x0b\x1e\x50\xec\x74\x05\x56\x1a\xe0\x93\x9b\x23\x30\x96\x97\xde\xcf\xb2\x22\xd0\x3a\x54\x27\x66\xe3\xaa\x60\xce\x3d\xc7\xef\x3f\xd6\x02\x93\xde\x07\x03\xac\x6c\x15\xe3\x9c\x65\x8d\xc4\xac\xd2\xdb\x2c\xf6\xa9\x86\xf2\xd4\xd5\x50\xb0\xad\xb6\x7d\x88\x31\xef\x02\x96\x50\xb0\xb4\xff\xe3\xec\xda\xad\xf1\x23\x89\x7b\xa0\x82\x4d\x5b\xfc\x4b\xc2\xfb\x6f\x9c\xbc\xc6\xed\xdb\x06\x72\x29\x6b\x21\x95\x1a\xc7\xf4\xf9\xf1\x9b\xf8\xfa\xe5\x87\xf8\xfe\xf8\x73\xc1\x98\x95\xe4\xaf\x68\xa1\xd2\x5b\x94\xd8\x65\x91\x92\x78\x42\x90\x46\xdb\x7d\xd4\xc1\x3a\xcd\xcf\xb5\x9d\x31\xd2\x4e\x6a\x2f\x2f\xc8\x49\xd4\x20\xe0\x72\x24\x24\x66\x72\xd8\xe4\x79\x3e\xc5\x12\x4f\x0e\x81\x1b\x30\x0e\xbb\x17\x40\x59\x05\x4f\x80\x42\x2b\x1e\xc7\xd6\x9f\x23\xa7\x46\x67\x80\x0e\x10\xae\xf5\x11\x09\xd9\x84\xd5\xe4\xe9\xfa\x2e\x5d\xcd\xc9\xe5\xc6\x50\xc6\x22\x69\x67\xaa\xd7\xb3\x00\x2a\x27\x9c\x39\xfa\x8d\x69\xec\x25\x41\x2b\xbb\x5b\xe6\xec\x69\x37\x2d\x79\x12\x84\x88\x82\xe0\x84\x01\x86\xf8\x2e\xd8\x92\xb4\xb3\x5e\xd4\xe8\x1a\xad\x00\x45\xc0\x8a\x1f\x88\xea\x22\x3b\x1b\x23\xe9\x91\x62\xb3\xda\xac\xb3\x21\x55\x69\x84\x92\xc4\x50\x81\xef\x64\xe5\xc7\xca\x08\x52\x09\xd2\x06\x5c\x20\xfe\x69\x35\x9a\xbc\x45\x4d\x30\x8b\x84\xfa\xac\x97\x11\xbc\x1f\xc1\xf8\x2f\x22\x8a\x2a\x3e\x1b\x82\xf7\x3c\x1e\x66\xe0\xd3\xf6\xb9\xcb\xf3\x7c\xc0\x62\xdb\xb1\xbf\xa7\x6e\xda\xdc\xeb\xc5\x16\x57\x56\xd6\xc8\x4a\x2b\x49\x30\x97\x7d\xda\x3c\x5b\xa7\xba\x8b\x5e\xdf\xb8\xde\x7c\x29\x2b\x10\x3b\x74\x46\xfc\x06\x74\xe3\x24\x3e\x76\xd5\xfb\x76\xd5\xaf\x00\x01\x92\xd6\xe1\x11\xf0\x96\x45\x5e\x70\x27\x2b\x6b\xd6\x26\xff\x20\xb2\x67\x2b\x0a\x6d\x1b\x77\x84\x0b\x97\xc5\xbc\x9e\xd0\x57\x7e\x3e\x8f\x3a\x2b\x8f\xa2\x95\x9a\xf8\xbd\x99\xc8\xde\xc8\x27\xa1\xed\xae\xd2\xfb\x03\xf1\xf5\x85\x89\x14\x6c\xc3\xfe\x42\x8b\xd7\x9c\xfe\x06\x8d\x7e\xc8\xf0\x3d\x32\x5c\xfc\x09\x00\x00\xff\xff\x4c\xda\xe4\x3d\x66\x09\x00\x00"),
		},
		"/prometheus.yml": &vfsgen۰CompressedFileInfo{
			name:             "prometheus.yml",
			modTime:          time.Date(2020, 6, 6, 8, 3, 41, 756063768, time.UTC),
			uncompressedSize: 828,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x6b\xdc\x30\x10\xc5\xef\xfa\x14\x8f\xf8\xe0\xf6\xb0\x66\xb7\x25\x90\xf8\x56\x68\xa1\x87\x1e\x0a\xed\xad\x04\x33\x91\xc7\x5e\x15\x59\xb3\x48\xe3\x6d\xfd\xed\x8b\xfc\xa7\x38\x21\x84\xe8\x36\xff\xde\xbc\xf9\xa9\xc0\x30\xa1\xf7\xf2\x48\x1e\x56\x42\xe7\x7a\xb3\x44\xb5\x01\x92\x8d\x74\xe1\xc6\x05\xe5\x78\x25\x5f\x23\xbf\xd3\x6d\x42\x81\x1f\xac\xd0\x33\xaf\x2d\xd8\x5a\xa0\x02\xbe\x72\x9c\x70\xba\x45\x62\x2b\xa1\x4d\x15\x3e\x73\x47\xa3\x57\xb8\xb4\x15\x31\xb8\x30\x2a\x57\x06\xe0\x2b\xf9\x91\xd4\x49\xd8\x2d\x5a\x96\x7c\x59\x4a\x8c\x38\x7a\x4e\x2f\x08\xff\x3c\x33\xda\xd7\xc4\x8b\xed\x06\x75\x03\xcb\x38\x77\xa5\x6c\x5d\x66\xf7\xeb\xe1\x9b\xc4\xbb\xd3\x31\xbd\xaf\x8c\x29\xf0\xc9\x73\xd4\x81\x02\xf5\x1c\x57\x2e\x63\x9c\x4d\x1a\xca\x25\x17\xfa\x0c\x88\x76\x6d\x29\x27\x0e\x48\x4a\xea\x6c\xb3\xcc\xcc\xb9\x9c\x55\x8a\x3d\xeb\x1a\x66\x5b\x87\x27\xb3\xf5\xfd\xf1\xfe\x63\xde\xfb\x4d\xa8\x5d\xaf\x95\x60\x19\x14\x5a\x5c\x38\x3a\x69\x9d\x25\xef\xa7\x8d\x16\x67\xfb\x03\xc8\x5a\x89\xad\x0b\xfd\xb3\x83\xca\x17\xa0\x96\x95\xc9\xc2\x4d\xe7\x3c\xcf\x46\xb2\x89\x9b\xce\xc5\xa4\xcd\xbc\xb1\x9a\x06\x7f\xb3\xe5\x17\xc4\xfb\x42\xa6\xb2\x7d\xf7\x13\x22\x39\x52\x72\x21\xdb\xe0\xbf\x64\xd5\x4f\x90\xc0\xe0\xd0\x5e\xc4\x85\x19\xf6\x32\x57\x9b\x02\x5f\x39\x32\x9c\x96\x09\xdf\xa3\x0c\xac\x67\x1e\x13\x9c\x26\xf6\x5d\x65\xd6\xcf\xda\xc1\x3b\xe0\xb7\x3c\x36\x81\x06\xae\x51\x5e\xfe\x4f\x94\x33\xc8\xd7\x59\xe3\x57\xe9\xc5\x92\x3f\x4b\xd2\x0c\xf8\x58\x3e\x98\xe7\x8a\x3d\x29\xff\xa1\xe9\x8d\x72\x6b\x77\x7d\x77\xbc\xfb\x50\x3e\x98\x7f\x01\x00\x00\xff\xff\xd0\xae\x6d\xe6\x3c\x03\x00\x00"),
		},
		"/resolv.conf": &vfsgen۰FileInfo{
			name:    "resolv.conf",
			modTime: time.Date(2020, 6, 6, 8, 6, 34, 656327661, time.UTC),
			content: []byte("\x6e\x61\x6d\x65\x73\x65\x72\x76\x65\x72\x20\x38\x2e\x38\x2e\x38\x2e\x38\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/docker-compose.yaml"].(os.FileInfo),
		fs["/prometheus.yml"].(os.FileInfo),
		fs["/resolv.conf"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
